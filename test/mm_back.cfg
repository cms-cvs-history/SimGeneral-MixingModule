# this is an example of how to run playback with input pileup
# the file Cum_store.root is supposed to have been run with 
#     module rndmStore = RandomEngineStateProducer { } or equivalent

process PRODMIXBack  = {

include "SimGeneral/MixingModule/data/mixLowLumPU.cfi"
  
   service = RandomNumberGeneratorService
     {
      untracked string restoreStateLabel = "rndmStore" 
      PSet moduleSeeds = {
         untracked uint32 mix = 77  
      }
    }


    source = PoolSource { 
	 untracked vstring fileNames =
	 {'file:Cum_store.root'}
         untracked uint32 skipEvents = 2
    }
    untracked PSet maxEvents = {untracked int32 input = -1}
	
    module out = PoolOutputModule {	
	       untracked string fileName = 'file:Cum_restored.root'
               untracked vstring outputCommands = {
                 "drop *_*_*_*",
                 "keep *_*_*_PRODMIX"
               }
	}
    
    path p = { mix}
        
    endpath outpath = { out }

    service = MessageLogger {
         untracked vstring debugModules = {   "mix"   }
         untracked vstring categories    =    { "MixingModule"}

         untracked vstring destinations =  {    "cout"  }
         untracked PSet cout   =  {
                 untracked string threshold = "DEBUG"
                 untracked PSet DEBUG ={untracked int32 limit = 0}
                 untracked PSet MixingModule ={untracked int32 limit = 1000000000000}
         }
      }

      replace mix.playback=true

}


