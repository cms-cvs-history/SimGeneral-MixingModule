#
# this is an example of how to run a mix job,
# preparing for playback
#
process PRODMIX  = {

include "SimGeneral/MixingModule/data/mixLowLumPU.cfi"
  
   service = RandomNumberGeneratorService
     {
      PSet moduleSeeds = {
         untracked uint32 mix = 12345
      }
    }

    module rndmStore = RandomEngineStateProducer { }            # preparation of playback

    source = PoolSource { 
	 untracked vstring fileNames =
        	 {'rfio:/castor/cern.ch/cms/store/mc/2007/12/2/RelVal-RelValSingleElectronPt35-1196631782/0000/52388364-7CA1-DC11-A0B9-003048562A9E.root'}
    }
    untracked PSet maxEvents = {untracked int32 input = 5}
	
    module out = PoolOutputModule {	
	       untracked string fileName = 'file:Cum_store.root'
               untracked vstring outputCommands = {
                 "drop *_*_*_*",
	         "keep *_*_*_PRODMIX",
                 "keep PSimHits*_*_*_*",
                 "keep PCaloHits*_*_*_*",
                 "keep SimTracks*_*_*_*",
                 "keep SimVertexs*_*_*_*",
                 "keep edmHepMCProduct_*_*_*"
               }
	}
    
    path p = { mix,rndmStore }                                    # rndmstore run for preparation of playback
        
    endpath outpath = { out }

    service = MessageLogger {
         untracked vstring debugModules = {   "mix"   }
         untracked vstring categories    =    { "MixingModule"}

         untracked vstring destinations =  {    "cout"  }
         untracked PSet cout   =  {
                 untracked string threshold = "DEBUG"
                 untracked PSet DEBUG ={untracked int32 limit = 0}
                 untracked PSet MixingModule ={untracked int32 limit = 1000000000000}
         }
      }
}


